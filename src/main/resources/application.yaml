spring:
  main:
    web-application-type: reactive
  webflux:
    problemdetails:
      enabled: true
  application:
    name: book-music-service
    org: kramphub

book-album-api:
  services:
    itunes:
      url: https://itunes.apple.com

google-books:
  search-limit: 5

itunes:
  search-limit: 5

resilience4j.circuitbreaker:
  instances:
    google-books:
      permitted-number-of-calls-in-half-open-state: 10
      sliding-window-size: 100
      wait-duration-in-open-state: 30s
      register-health-indicator: true
      sliding-window-type: COUNT_BASED
      failure-rate-threshold: 50
    itunes:
      permitted-number-of-calls-in-half-open-state: 10
      sliding-window-size: 100
      wait-duration-in-open-state: 30s
      register-health-indicator: true
      sliding-window-type: COUNT_BASED
      failure-rate-threshold: 50

  metrics:
    enabled: true

resilience4j.retry:
  instances:
    google-books:
      exponential-backoff-multiplier: 3
      max-attempts: 3
      enable-exponential-backoff: true
      wait-duration: 500ms
      ignore-exceptions:
        - io.github.resilience4j.circuitbreaker.CallNotPermittedException
    itunes:
      exponential-backoff-multiplier: 3
      max-attempts: 3
      enable-exponential-backoff: true
      wait-duration: 500ms
      ignore-exceptions:
        - io.github.resilience4j.circuitbreaker.CallNotPermittedException
        - com.kramphub.infra.exception.ServiceCallException
  metrics:
    enabled: true

resilience4j.bulkhead:
  instances:
    google-books:
      max-concurrent-calls: 10
    itunes:
      max-concurrent-calls: 50
  metrics:
    enabled: true


management:
  endpoint:
    health:
      show-details: always
    env:
      show-values: always
  info:
    env:
      enabled: true
    os:
      enabled: true
    java:
      enabled: true
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    tags:
      application: ${spring.application.name}
      org: ${spring.application.org}
      profiles: ${spring.profiles.active}
    distribution:
      percentiles-histogram:
        http:
          client:
            requests: true
          server:
            requests: true
    prometheus:
      metrics:
        export:
          step: 10s


logging.pattern.level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"